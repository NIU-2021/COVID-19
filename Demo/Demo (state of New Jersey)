+*In[1]:*+
[source, ipython3]
----
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline 
!pip install mpld3
import mpld3
mpld3.enable_notebook()
----


+*Out[1]:*+
----
Requirement already satisfied: mpld3 in c:\anaconda\lib\site-packages (0.5.1)
Requirement already satisfied: jinja2 in c:\anaconda\lib\site-packages (from mpld3) (2.11.1)
Requirement already satisfied: matplotlib in c:\anaconda\lib\site-packages (from mpld3) (3.1.3)
Requirement already satisfied: MarkupSafe>=0.23 in c:\anaconda\lib\site-packages (from jinja2->mpld3) (1.1.1)
Requirement already satisfied: numpy>=1.11 in c:\anaconda\lib\site-packages (from matplotlib->mpld3) (1.18.1)
Requirement already satisfied: cycler>=0.10 in c:\anaconda\lib\site-packages (from matplotlib->mpld3) (0.10.0)
Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in c:\anaconda\lib\site-packages (from matplotlib->mpld3) (2.4.6)
Requirement already satisfied: python-dateutil>=2.1 in c:\anaconda\lib\site-packages (from matplotlib->mpld3) (2.8.1)
Requirement already satisfied: kiwisolver>=1.0.1 in c:\anaconda\lib\site-packages (from matplotlib->mpld3) (1.1.0)
Requirement already satisfied: six in c:\anaconda\lib\site-packages (from cycler>=0.10->matplotlib->mpld3) (1.14.0)
Requirement already satisfied: setuptools in c:\anaconda\lib\site-packages (from kiwisolver>=1.0.1->matplotlib->mpld3) (45.2.0.post20200210)
----


+*In[2]:*+
[source, ipython3]
----
train_data = pd.read_csv(r'C:\Users\SUN\Desktop\ALI NATURE\NJ-01.csv')
train_data 
----


+*Out[2]:*+
----
[cols=",,,,,",options="header",]
|==============================================
| |Id |State |Date |ConfirmedCases |Fatalities
|0 |1 |New_Jersey |2/14/2020 |0 |0
|1 |2 |New_Jersey |2/15/2020 |0 |0
|2 |3 |New_Jersey |2/16/2020 |0 |0
|3 |4 |New_Jersey |2/17/2020 |0 |0
|4 |5 |New_Jersey |2/18/2020 |0 |0
|... |... |... |... |... |...
|164 |165 |New_Jersey |7/27/2020 |181732 |15804
|165 |166 |New_Jersey |7/28/2020 |182215 |15825
|166 |167 |New_Jersey |7/29/2020 |182475 |15798
|167 |168 |New_Jersey |7/30/2020 |182845 |15809
|168 |169 |New_Jersey |7/31/2020 |183535 |15819
|==============================================

169 rows Ã— 5 columns
----


+*In[3]:*+
[source, ipython3]
----
Last_Date = train_data .iloc[-1]["Date"]
Last_Date
----


+*Out[3]:*+
----'7/31/2020'----


+*In[4]:*+
[source, ipython3]
----
!pip install lmfit
from lmfit import Model
----


+*Out[4]:*+
----
Requirement already satisfied: lmfit in c:\anaconda\lib\site-packages (1.0.1)
Requirement already satisfied: numpy>=1.16 in c:\anaconda\lib\site-packages (from lmfit) (1.18.1)
Requirement already satisfied: uncertainties>=3.0.1 in c:\anaconda\lib\site-packages (from lmfit) (3.1.4)
Requirement already satisfied: asteval>=0.9.16 in c:\anaconda\lib\site-packages (from lmfit) (0.9.19)
Requirement already satisfied: scipy>=1.2 in c:\anaconda\lib\site-packages (from lmfit) (1.4.1)
Requirement already satisfied: future in c:\anaconda\lib\site-packages (from uncertainties>=3.0.1->lmfit) (0.18.2)
----


+*In[5]:*+
[source, ipython3]
----
def New_R_0(t, R_0_start, k, x0, R_0_end):
    return (R_0_start-R_0_end) / (1 + np.exp(-k*(-t+x0))) + R_0_end
----


+*In[6]:*+
[source, ipython3]
----
from scipy.integrate import odeint 
def Eqs_SEIR(y, t, N, beta, gamma, sigma):
    S, E, I, R = y
    dSdt = -beta(t) * S * I / N  
    dEdt = beta(t) * S * I / N - sigma * E 
    dIdt = sigma * E - gamma * I  
    dRdt = gamma * I  
    return dSdt, dEdt, dIdt, dRdt
----


+*In[7]:*+
[source, ipython3]
----
def Modified_SEIR(N, D, Max_d, CFR_O, CFR_S, R_0, **R_0_kwargs):
    '''
    R_0: callable
    '''
    # Initial value
    I0, R0, E0 = 0, 0, 1  
    S0 = N - I0 - R0 - E0

    gamma = 1.0 / D
    sigma = 1.0 / 5.0 

    # Defining contact rate
    def beta(t):
        return R_0(t, **R_0_kwargs) * gamma
    t = np.linspace(0, Max_d, Max_d)

    # Initial vector
    y0 = S0, E0, I0, R0
    ret = odeint(Eqs_SEIR, y0, t, args=(N, beta, gamma, sigma))
    S, E, I, R = ret.T

    def CFR(t):
        if t < 7:
            return CFR_O
        else:
            return CFR_O + CFR_S * (I[t - 7] / N)  
                
    # Inorporating deaths
    X = np.zeros(Max_d)
    for day in range(16, Max_d): 
        for valid_day in range(day-16):
            X[day] += CFR(valid_day) * beta(valid_day) * I[valid_day]
             
    return t, S, E, I, R, X, [R_0(t, **R_0_kwargs) for t in range(Max_d)], N, [CFR(t) for t in range(Max_d)]


----


+*In[8]:*+
[source, ipython3]
----
def plot_Modified_SEIR(t, S, E, I, R, X, R_0, N, CFR, x_ticks=None):
    # Plot the data   
    f, ax = plt.subplots(1,1,figsize=(10,4))
    #ax.plot(t, S, 'b', alpha=0.7, linewidth=2.5, label='Susceptible')
    ax.plot(t, E, 'y--', alpha=0.7, linewidth=2.5, label='Exposed')
    ax.plot(t, I, 'y', alpha=0.7, linewidth=2.5, label='Infected')
    ax.plot(t, X, 'r', alpha=0.7, linewidth=2.5, label='Dead')
    ax.plot(t, R, 'g', alpha=0.7, linewidth=2.5, label='Recovered')

    ax.set_xlabel('Time (days)')
    ax.title.set_text('SEIR-Model')
    ax.yaxis.set_tick_params(length=0)
    ax.xaxis.set_tick_params(length=0)

    if x_ticks is not None:
        ax.set_xticks(t[::21])
        ax.set_xticklabels(x_ticks[::21])    

    legend = ax.legend()
    legend.get_frame().set_alpha(0.8)
    for spine in ('top', 'right', 'bottom', 'left'):
        ax.spines[spine].set_visible(False)
    plt.savefig('SEIR-Model_NJ.png', dpi=600)    
    plt.show();
    
    f = plt.figure(figsize=(10,4))

    ax1 = f.add_subplot(121)
    ax1.plot(t, R_0, 'b--', alpha=0.7, linewidth=2.5, label='R_0')
 
    ax1.set_xlabel('Time (days)')
    ax1.title.set_text('R_0 over time')
    ax1.yaxis.set_tick_params(length=0)
    ax1.xaxis.set_tick_params(length=0)
    if x_ticks is not None:
        ax1.set_xticks(t[::35])
        ax1.set_xticklabels(x_ticks[::35])    
    legend = ax1.legend()
    legend.get_frame().set_alpha(0.8)
    for spine in ('top', 'right', 'bottom', 'left'):
        ax.spines[spine].set_visible(False)

    ax2 = f.add_subplot(122)
    ax2.plot(t, CFR, 'r--', alpha=0.7, linewidth=2.5, label='CFR')
    
    ax2.set_xlabel('Time (days)')
    ax2.title.set_text('CFR over time')
    ax2.yaxis.set_tick_params(length=0)
    ax2.xaxis.set_tick_params(length=0)
    if x_ticks is not None:
        ax2.set_xticks(t[::70])
        ax2.set_xticklabels(x_ticks[::70])
    legend = ax2.legend()
    legend.get_frame().set_alpha(0.5)
    for spine in ('top', 'right', 'bottom', 'left'):
        ax.spines[spine].set_visible(False)
    plt.savefig('R_0 and CFR_NJ.png', dpi=600)    

    plt.show();
----


+*In[9]:*+
[source, ipython3]
----
def plot_Modified_SEIR_1(t, S, E, I, R, X, R_0, N, CFR, x_ticks=None):
    # Plot the data on three separate curves for S(t), I(t) and R(t)
    f, ax = plt.subplots(1,1,figsize=(10,4))
    ax.plot(t, I, 'r', alpha=0.7, linewidth=4, label='Infected')
 
    ax.set_xlabel('Time (days)')
    ax.title.set_text('SEIR-Model with varying R_0 and CFR')

    ax.yaxis.set_tick_params(length=0)
    ax.xaxis.set_tick_params(length=0)

    if x_ticks is not None:
        ax.set_xticks(t[::21])
        ax.set_xticklabels(x_ticks[::21])    

    legend = ax.legend()
    legend.get_frame().set_alpha(0.5)
    for spine in ('top', 'right', 'bottom', 'left'):
        ax.spines[spine].set_visible(False)
    plt.savefig('Infected vs time.png', dpi=600)
    plt.show();
----


+*In[10]:*+
[source, ipython3]
----
def Fit_Modified_SEIR(CN, missing_days=0, RN=None, fit_method="least_squares", **R_0_kwargs):

    if RN is not None:
        y_data = train_data [(train_data ["State"] == CN)].Fatalities.values
    else:
        if len(train_data ["State"] == CN) > len(train_data ["State"] == "United States"):  
            y_data = train_data [(train_data ["State"] == CN)].Fatalities.values
        else:
            y_data = train_data [train_data ["State"] == CN].Fatalities.values
        
    Max_d = len(train_data.groupby("Date").sum().index) + missing_days 
    y_data = np.concatenate((np.zeros(missing_days), y_data))
    
    # State Population
    N = 8936570
    
    # Infectious period (please read the manuscript for more information)
    D = 10

    x_data = np.linspace(0, Max_d - 1, Max_d, dtype=int)

    # Solver
    def Modified_SEIR_deaths(x, N, D, CFR_O, CFR_S, R_0_delta, **R_0_kwargs):
        t_, S_, E_, I_, R_, X, R_0_, N_, CFR_ = Modified_SEIR(N, D, Max_d, CFR_O, CFR_S, R_0=New_R_0, **R_0_kwargs)

        return X[x]

    mod = Model(Modified_SEIR_deaths)

    # Initial values and bounds
    mod.set_param_hint('N', value=N, vary=False)

    mod.set_param_hint('D', value=D, vary=False)

    mod.set_param_hint('CFR_O', value=0.01, min=0.0001, max=0.1)
    mod.set_param_hint('CFR_S', value=0.1, min=0.0001, max=1.0)
    
    mod.set_param_hint('R_0_start', value=2.5, min=1.0, max=5.0)
    mod.set_param_hint('R_0_end', value=0.7, min=0.01, max=5.0)

    mod.set_param_hint('x0', value=30.0, min=0.0, max=float(Max_d))
    mod.set_param_hint('k', value=0.1, min=0.01, max=5.0)
    '''
    if R_0_kwargs:
        for arg in R_0_kwargs:
            mod.set_param_hint(arg, value=R_0_kwargs[arg])
    '''

    params = mod.make_params()
    params.add('R_0_delta', value=1.0, min=0.0, expr="R_0_start - R_0_end")  
    result = mod.fit(y_data, params, method=fit_method, x=x_data)

    CFR_O = result.params["CFR_O"].value
    CFR_S = result.params["CFR_S"].value
    R_0_result_params = {}
    for val in R_0_kwargs:
        R_0_result_params[val] = result.params[val].value

    return result, CN, y_data, N, D, Max_d, CFR_O, CFR_S, R_0_result_params

    # Comparison plot
def Modified_SEIR_fitted_plot(result, CN, y_data):
    x_ticks = pd.date_range(end=Last_Date, periods=len(y_data))

    plt.figure(figsize=(10,5))
    x_data = np.linspace(0, len(y_data), len(y_data))
    real_data, = plt.plot(x_data, y_data, 'b-', label="Reported Data")
    SIR_fit = plt.plot(x_data, result.best_fit, 'r-', label="Predicted by Present Study")
    
    plt.xlabel("Day")
    plt.ylabel("Fatalities")
    plt.legend(numpoints=1, loc=2, frameon=None)
    plt.savefig('Real Data vs SEIR-Model_NJ.png', dpi=600)    

    plt.show()
----


+*In[11]:*+
[source, ipython3]
----
result, CN, y_data, N, D, Max_d, CFR_O, CFR_S, R_0_result_params = Fit_Modified_SEIR("New_Jersey", missing_days=30, fit_method="least_squares", 
                                                                                                                 R_0_start=2.5, k=0.3, x0=170, R_0_end=0.2)
Modified_SEIR_fitted_plot(result, "New_Jersey", y_data);

plot_Modified_SEIR(*Modified_SEIR(N, D, Max_d, CFR_O, CFR_S, New_R_0, **R_0_result_params))

plot_Modified_SEIR_1(*Modified_SEIR(N, D, Max_d, CFR_O, CFR_S, New_R_0, **R_0_result_params))

----


+*Out[11]:*+
----
[[fig_el80020798700252884065656004]]

[[fig_el80020798506937042788497875]]

[[fig_el80020799515131602065247335]]

[[fig_el80020798783982163407781488]]
----


+*In[12]:*+
[source, ipython3]
----
# Data extraction for the rest of analysis
print (Modified_SEIR(N, D, Max_d, CFR_O, CFR_S, New_R_0, **R_0_result_params))

----


+*Out[12]:*+
----
(array([  0.        ,   1.00505051,   2.01010101,   3.01515152,
         4.02020202,   5.02525253,   6.03030303,   7.03535354,
         8.04040404,   9.04545455,  10.05050505,  11.05555556,
        12.06060606,  13.06565657,  14.07070707,  15.07575758,
        16.08080808,  17.08585859,  18.09090909,  19.0959596 ,
        20.1010101 ,  21.10606061,  22.11111111,  23.11616162,
        24.12121212,  25.12626263,  26.13131313,  27.13636364,
        28.14141414,  29.14646465,  30.15151515,  31.15656566,
        32.16161616,  33.16666667,  34.17171717,  35.17676768,
        36.18181818,  37.18686869,  38.19191919,  39.1969697 ,
        40.2020202 ,  41.20707071,  42.21212121,  43.21717172,
        44.22222222,  45.22727273,  46.23232323,  47.23737374,
        48.24242424,  49.24747475,  50.25252525,  51.25757576,
        52.26262626,  53.26767677,  54.27272727,  55.27777778,
        56.28282828,  57.28787879,  58.29292929,  59.2979798 ,
        60.3030303 ,  61.30808081,  62.31313131,  63.31818182,
        64.32323232,  65.32828283,  66.33333333,  67.33838384,
        68.34343434,  69.34848485,  70.35353535,  71.35858586,
        72.36363636,  73.36868687,  74.37373737,  75.37878788,
        76.38383838,  77.38888889,  78.39393939,  79.3989899 ,
        80.4040404 ,  81.40909091,  82.41414141,  83.41919192,
        84.42424242,  85.42929293,  86.43434343,  87.43939394,
        88.44444444,  89.44949495,  90.45454545,  91.45959596,
        92.46464646,  93.46969697,  94.47474747,  95.47979798,
        96.48484848,  97.48989899,  98.49494949,  99.5       ,
       100.50505051, 101.51010101, 102.51515152, 103.52020202,
       104.52525253, 105.53030303, 106.53535354, 107.54040404,
       108.54545455, 109.55050505, 110.55555556, 111.56060606,
       112.56565657, 113.57070707, 114.57575758, 115.58080808,
       116.58585859, 117.59090909, 118.5959596 , 119.6010101 ,
       120.60606061, 121.61111111, 122.61616162, 123.62121212,
       124.62626263, 125.63131313, 126.63636364, 127.64141414,
       128.64646465, 129.65151515, 130.65656566, 131.66161616,
       132.66666667, 133.67171717, 134.67676768, 135.68181818,
       136.68686869, 137.69191919, 138.6969697 , 139.7020202 ,
       140.70707071, 141.71212121, 142.71717172, 143.72222222,
       144.72727273, 145.73232323, 146.73737374, 147.74242424,
       148.74747475, 149.75252525, 150.75757576, 151.76262626,
       152.76767677, 153.77272727, 154.77777778, 155.78282828,
       156.78787879, 157.79292929, 158.7979798 , 159.8030303 ,
       160.80808081, 161.81313131, 162.81818182, 163.82323232,
       164.82828283, 165.83333333, 166.83838384, 167.84343434,
       168.84848485, 169.85353535, 170.85858586, 171.86363636,
       172.86868687, 173.87373737, 174.87878788, 175.88383838,
       176.88888889, 177.89393939, 178.8989899 , 179.9040404 ,
       180.90909091, 181.91414141, 182.91919192, 183.92424242,
       184.92929293, 185.93434343, 186.93939394, 187.94444444,
       188.94949495, 189.95454545, 190.95959596, 191.96464646,
       192.96969697, 193.97474747, 194.97979798, 195.98484848,
       196.98989899, 197.99494949, 199.        ]), array([8936569.        , 8936568.96090618, 8936568.85530362,
       8936568.69449359, 8936568.48369296, 8936568.22391506,
       8936567.91312148, 8936567.54690049, 8936567.11883363,
       8936566.62065275, 8936566.04225085, 8936565.3715854 ,
       8936564.5944967 , 8936563.69445298, 8936562.65222683,
       8936561.44550245, 8936560.04840929, 8936558.43097482,
       8936556.55848623, 8936554.39074851, 8936551.88122356,
       8936548.97603254, 8936545.61280003, 8936541.71931562,
       8936537.21198415, 8936531.99403163, 8936525.95342876,
       8936518.96048652, 8936510.86507321, 8936501.49339452,
       8936490.64426548, 8936478.08479649, 8936463.5454013 ,
       8936446.71402019, 8936427.22943805, 8936404.67355242,
       8936378.56243286, 8936348.33598231, 8936313.34598616,
       8936272.84230257, 8936225.95691244, 8936171.68550763,
       8936108.86625304, 8936036.15531088, 8935951.99866568,
       8935854.59973804, 8935741.882222  , 8935611.44754683,
       8935460.52631843, 8935285.92310075, 8935083.95392066,
       8934850.37597341, 8934580.30919047, 8934268.1496551 ,
       8933907.47537994, 8933490.94577696, 8933010.19737586,
       8932455.74011437, 8931816.86108037, 8931081.54603294,
       8930236.43339014, 8929266.82179407, 8928156.75858996,
       8926889.24515218, 8925446.60156413, 8923811.03860069,
       8921965.48278622, 8919894.68766015, 8917586.63233765,
       8915034.15611107, 8912236.69633953, 8909201.90480088,
       8905946.83189776, 8902498.32763642, 8898892.36176285,
       8895172.12780157, 8891385.05806076, 8887579.15710324,
       8883799.261946  , 8880083.86940925, 8876463.01676863,
       8872957.42602169, 8869578.82738038, 8866331.16432065,
       8863212.29288142, 8860215.81033231, 8857332.74166989,
       8854552.92688268, 8851866.05249406, 8849262.34171378,
       8846732.95753998, 8844270.18716748, 8841867.47423036,
       8839519.35551334, 8837221.34505934, 8834969.7964539 ,
       8832761.76262224, 8830594.86548368, 8828467.18078792,
       8826377.14041622, 8824323.45193678, 8822305.03389555,
       8820320.96470391, 8818370.44301056, 8816452.75729684,
       8814567.26294345, 8812713.36505261, 8810890.50579048,
       8809098.15512048, 8807335.8040801 , 8805602.96000374,
       8803899.14312539, 8802223.8842163 , 8800576.7229516 ,
       8798957.20681733, 8797364.89037124, 8795799.334763  ,
       8794260.10743089, 8792746.78191161, 8791258.9377303 ,
       8789796.16033006, 8788358.04103225, 8786944.17701143,
       8785554.17127044, 8784187.63262079, 8782844.1756584 ,
       8781523.42073372, 8780224.99391779, 8778948.52696178,
       8777693.65725052, 8776460.02775697, 8775247.28698656,
       8774055.08891552, 8772883.09292637, 8771730.96376337,
       8770598.37145095, 8769484.99122935, 8768390.50349028,
       8767314.59371012, 8766256.95237375, 8765217.27490934,
       8764195.26163023, 8763190.61764989, 8762203.05281542,
       8761232.28164957, 8760278.02327764, 8759340.00135054,
       8758417.94398819, 8757511.5837248 , 8756620.65741101,
       8755744.90617803, 8754884.07536703, 8754037.91444856,
       8753206.17698489, 8752388.62055191, 8751585.00665967,
       8750795.10078218, 8750018.67214868, 8749255.49383833,
       8748505.34257997, 8747767.99883459, 8747043.24660008,
       8746330.87349006, 8745630.67054964, 8744942.43229004,
       8744265.95653432, 8743601.04464904, 8742947.5011828 ,
       8742305.13373162, 8741673.75335421, 8741053.1740917 ,
       8740443.21296647, 8739843.69028202, 8739254.42913617,
       8738675.25553211, 8738105.9986337 , 8737546.49002113,
       8736996.56440165, 8736456.05923927, 8735924.81453644,
       8735402.67300689, 8734889.48004799, 8734385.08362739,
       8733889.33427483, 8733402.08493006, 8732923.19089721,
       8732452.51001943, 8731989.90263672, 8731535.23131792,
       8731088.36092524, 8730649.15861833, 8730217.49377665,
       8729793.23795993, 8729376.26488579, 8728966.450413  ,
       8728563.67247375, 8728167.81089004, 8727778.74811139,
       8727396.36775046]), array([1.00000000e+00, 8.54450946e-01, 7.95426782e-01, 7.97044901e-01,
       8.43612049e-01, 9.26078566e-01, 1.03979398e+00, 1.18309710e+00,
       1.35644339e+00, 1.56187989e+00, 1.80274744e+00, 2.08353408e+00,
       2.40983190e+00, 2.78836797e+00, 3.22709176e+00, 3.73530950e+00,
       4.32386071e+00, 5.00533602e+00, 5.79433807e+00, 6.70778884e+00,
       7.76528918e+00, 8.98953698e+00, 1.04068129e+01, 1.20475433e+01,
       1.39469529e+01, 1.61458200e+01, 1.86913512e+01, 2.16381943e+01,
       2.50496099e+01, 2.89988281e+01, 3.35706181e+01, 3.88631047e+01,
       4.49898694e+01, 5.20823821e+01, 6.02928116e+01, 6.97972780e+01,
       8.07996099e+01, 9.35356879e+01, 1.08278460e+02, 1.25343733e+02,
       1.45096853e+02, 1.67960400e+02, 1.94423055e+02, 2.25049788e+02,
       2.60493549e+02, 3.01508652e+02, 3.48966065e+02, 4.03870783e+02,
       4.67381514e+02, 5.40832814e+02, 6.25759794e+02, 7.23925405e+02,
       8.37350123e+02, 9.68343615e+02, 1.11953754e+03, 1.29391808e+03,
       1.49485585e+03, 1.72612983e+03, 1.99193999e+03, 2.29690140e+03,
       2.64600965e+03, 3.04456369e+03, 3.49802903e+03, 4.01181925e+03,
       4.59097236e+03, 5.23969748e+03, 5.96077425e+03, 6.75480196e+03,
       7.61932546e+03, 8.54790770e+03, 9.52928042e+03, 1.05467636e+04,
       1.15781875e+04, 1.25965432e+04, 1.35714982e+04, 1.44717370e+04,
       1.52678585e+04, 1.59353552e+04, 1.64571057e+04, 1.68248912e+04,
       1.70396753e+04, 1.71106886e+04, 1.70536139e+04, 1.68883089e+04,
       1.66365024e+04, 1.63197973e+04, 1.59581693e+04, 1.55690118e+04,
       1.51666770e+04, 1.47624093e+04, 1.43645501e+04, 1.39789017e+04,
       1.36091628e+04, 1.32573698e+04, 1.29243047e+04, 1.26098491e+04,
       1.23132743e+04, 1.20334710e+04, 1.17691221e+04, 1.15188294e+04,
       1.12812005e+04, 1.10549062e+04, 1.08387154e+04, 1.06315126e+04,
       1.04323046e+04, 1.02402185e+04, 1.00544959e+04, 9.87448287e+03,
       9.69961942e+03, 9.52942868e+03, 9.36350586e+03, 9.20150823e+03,
       9.04314596e+03, 8.88817395e+03, 8.73638468e+03, 8.58760200e+03,
       8.44167589e+03, 8.29847793e+03, 8.15789760e+03, 8.01983905e+03,
       7.88421853e+03, 7.75096223e+03, 7.62000446e+03, 7.49128622e+03,
       7.36475399e+03, 7.24035877e+03, 7.11805524e+03, 6.99780119e+03,
       6.87955690e+03, 6.76328483e+03, 6.64894921e+03, 6.53651574e+03,
       6.42595142e+03, 6.31722438e+03, 6.21030370e+03, 6.10515928e+03,
       6.00176181e+03, 5.90008261e+03, 5.80009366e+03, 5.70176748e+03,
       5.60507712e+03, 5.50999613e+03, 5.41649852e+03, 5.32455873e+03,
       5.23415163e+03, 5.14525251e+03, 5.05783705e+03, 4.97188130e+03,
       4.88736171e+03, 4.80425505e+03, 4.72253850e+03, 4.64218956e+03,
       4.56318608e+03, 4.48550624e+03, 4.40912858e+03, 4.33403193e+03,
       4.26019547e+03, 4.18759869e+03, 4.11622139e+03, 4.04604368e+03,
       3.97704599e+03, 3.90920902e+03, 3.84251379e+03, 3.77694161e+03,
       3.71247407e+03, 3.64909304e+03, 3.58678070e+03, 3.52551949e+03,
       3.46529210e+03, 3.40608152e+03, 3.34787100e+03, 3.29064403e+03,
       3.23438439e+03, 3.17907611e+03, 3.12470343e+03, 3.07125090e+03,
       3.01870327e+03, 2.96704554e+03, 2.91626297e+03, 2.86634103e+03,
       2.81726542e+03, 2.76902207e+03, 2.72159716e+03, 2.67497705e+03,
       2.62914834e+03, 2.58409784e+03, 2.53981255e+03, 2.49627973e+03,
       2.45348682e+03, 2.41142144e+03, 2.37007144e+03, 2.32942485e+03,
       2.28946991e+03, 2.25019504e+03, 2.21158882e+03, 2.17364006e+03,
       2.13633770e+03, 2.09967092e+03, 2.06362902e+03]), array([0.00000000e+00, 1.75435581e-01, 3.15191007e-01, 4.36509276e-01,
       5.51095429e-01, 6.67224458e-01, 7.91105155e-01, 9.27771399e-01,
       1.08167453e+00, 1.25708834e+00, 1.45839861e+00, 1.69032358e+00,
       1.95809599e+00, 2.26762699e+00, 2.62566609e+00, 3.03996704e+00,
       3.51946784e+00, 4.07449122e+00, 4.71697176e+00, 5.46071566e+00,
       6.32169937e+00, 7.31841407e+00, 8.47226351e+00, 9.80802412e+00,
       1.13543773e+01, 1.31445251e+01, 1.52169035e+01, 1.76160066e+01,
       2.03933427e+01, 2.36085383e+01, 2.73306181e+01, 3.16394851e+01,
       3.66276340e+01, 4.24021342e+01, 4.90869231e+01, 5.68254613e+01,
       6.57838018e+01, 7.61541420e+01, 8.81589286e+01, 1.02055604e+02,
       1.18142092e+02, 1.36763128e+02, 1.58317574e+02, 1.83266852e+02,
       2.12144659e+02, 2.45568159e+02, 2.84250838e+02, 3.29017256e+02,
       3.80819937e+02, 4.40758635e+02, 5.10102251e+02, 5.90313624e+02,
       6.83077405e+02, 7.90331155e+02, 9.14299641e+02, 1.05753214e+03,
       1.22294216e+03, 1.41384864e+03, 1.63401668e+03, 1.88769521e+03,
       2.17964729e+03, 2.51516704e+03, 2.90007469e+03, 3.34067837e+03,
       3.84368790e+03, 4.41606279e+03, 5.06477384e+03, 5.79645795e+03,
       6.61694975e+03, 7.53068393e+03, 8.53998247e+03, 9.64427019e+03,
       1.08392993e+04, 1.21165009e+04, 1.34626059e+04, 1.48596750e+04,
       1.62856331e+04, 1.77153238e+04, 1.91219943e+04, 2.04790266e+04,
       2.17616746e+04, 2.29485692e+04, 2.40228110e+04, 2.49725596e+04,
       2.57911208e+04, 2.64766121e+04, 2.70313237e+04, 2.74609068e+04,
       2.77735065e+04, 2.79789306e+04, 2.80879120e+04, 2.81114993e+04,
       2.80605826e+04, 2.79455495e+04, 2.77760557e+04, 2.75608905e+04,
       2.73079167e+04, 2.70240659e+04, 2.67153718e+04, 2.63870302e+04,
       2.60434717e+04, 2.56884427e+04, 2.53250860e+04, 2.49560199e+04,
       2.45834105e+04, 2.42090389e+04, 2.38343600e+04, 2.34605551e+04,
       2.30885765e+04, 2.27191870e+04, 2.23529920e+04, 2.19904681e+04,
       2.16319860e+04, 2.12778299e+04, 2.09282138e+04, 2.05832947e+04,
       2.02431834e+04, 1.99079538e+04, 1.95776497e+04, 1.92522913e+04,
       1.89318796e+04, 1.86164005e+04, 1.83058280e+04, 1.80001267e+04,
       1.76992538e+04, 1.74031609e+04, 1.71117950e+04, 1.68251001e+04,
       1.65430175e+04, 1.62654870e+04, 1.59924468e+04, 1.57238346e+04,
       1.54595876e+04, 1.51996427e+04, 1.49439367e+04, 1.46924071e+04,
       1.44449911e+04, 1.42016268e+04, 1.39622526e+04, 1.37268076e+04,
       1.34952314e+04, 1.32674642e+04, 1.30434473e+04, 1.28231221e+04,
       1.26064313e+04, 1.23933180e+04, 1.21837261e+04, 1.19776003e+04,
       1.17748861e+04, 1.15755296e+04, 1.13794777e+04, 1.11866782e+04,
       1.09970793e+04, 1.08106303e+04, 1.06272810e+04, 1.04469819e+04,
       1.02696843e+04, 1.00953403e+04, 9.92390257e+03, 9.75532441e+03,
       9.58955992e+03, 9.42656385e+03, 9.26629161e+03, 9.10869927e+03,
       8.95374355e+03, 8.80138181e+03, 8.65157209e+03, 8.50427303e+03,
       8.35944386e+03, 8.21704449e+03, 8.07703539e+03, 7.93937765e+03,
       7.80403295e+03, 7.67096355e+03, 7.54013228e+03, 7.41150257e+03,
       7.28503836e+03, 7.16070419e+03, 7.03846515e+03, 6.91828684e+03,
       6.80013539e+03, 6.68397750e+03, 6.56978035e+03, 6.45751165e+03,
       6.34713961e+03, 6.23863291e+03, 6.13196075e+03, 6.02709281e+03,
       5.92399926e+03, 5.82265071e+03, 5.72301826e+03, 5.62507345e+03,
       5.52878828e+03, 5.43413520e+03, 5.34108709e+03, 5.24961727e+03,
       5.15969945e+03, 5.07130789e+03, 4.98441708e+03]), array([0.00000000e+00, 9.20729493e-03, 3.40785879e-02, 7.19522313e-02,
       1.21599557e-01, 1.82781912e-01, 2.55979378e-01, 3.42231001e-01,
       4.43048447e-01, 5.60379016e-01, 6.96603099e-01, 8.54556935e-01,
       1.03757540e+00, 1.24955206e+00, 1.49501532e+00, 1.77922101e+00,
       2.10826216e+00, 2.48919794e+00, 2.93020394e+00, 3.44074698e+00,
       4.03178788e+00, 4.71601641e+00, 5.50812359e+00, 6.42511697e+00,
       7.48668571e+00, 8.71562325e+00, 1.01383165e+01, 1.17853126e+01,
       1.36919742e+01, 1.58992390e+01, 1.84544983e+01, 2.14126137e+01,
       2.48370952e+01, 2.88014635e+01, 3.33908272e+01, 3.87037083e+01,
       4.48541554e+01, 5.19741878e+01, 6.02166251e+01, 6.97583597e+01,
       8.08041430e+01, 9.35909652e+01, 1.08393118e+02, 1.25528049e+02,
       1.45363127e+02, 1.68323450e+02, 1.94900875e+02, 2.25664414e+02,
       2.61272231e+02, 3.02485451e+02, 3.50184034e+02, 4.05384998e+02,
       4.69263281e+02, 5.43175575e+02, 6.28687438e+02, 7.27604010e+02,
       8.42004613e+02, 9.74281415e+02, 1.12718224e+03, 1.30385735e+03,
       1.50790968e+03, 1.74344747e+03, 2.01513768e+03, 2.32825722e+03,
       2.68873818e+03, 3.10320113e+03, 3.57896912e+03, 4.12405242e+03,
       4.74709246e+03, 5.45725226e+03, 6.26404077e+03, 7.17706140e+03,
       8.20568135e+03, 9.35862829e+03, 1.06435341e+04, 1.20664602e+04,
       1.36314503e+04, 1.53401639e+04, 1.71916380e+04, 1.91822128e+04,
       2.13056333e+04, 2.35533162e+04, 2.59147477e+04, 2.83779672e+04,
       3.09300839e+04, 3.35577802e+04, 3.62477653e+04, 3.89871546e+04,
       4.17637640e+04, 4.45663184e+04, 4.73845804e+04, 5.02094118e+04,
       5.30327803e+04, 5.58477252e+04, 5.86482945e+04, 6.14294640e+04,
       6.41870464e+04, 6.69175977e+04, 6.96183252e+04, 7.22869999e+04,
       7.49218758e+04, 7.75216172e+04, 8.00852339e+04, 8.26120245e+04,
       8.51015277e+04, 8.75534797e+04, 8.99677790e+04, 9.23444563e+04,
       9.46836489e+04, 9.69855803e+04, 9.92505421e+04, 1.01478881e+05,
       1.03670984e+05, 1.05827273e+05, 1.07948195e+05, 1.10034213e+05,
       1.12085806e+05, 1.14103461e+05, 1.16087671e+05, 1.18038932e+05,
       1.19957742e+05, 1.21844596e+05, 1.23699990e+05, 1.25524416e+05,
       1.27318360e+05, 1.29082305e+05, 1.30816729e+05, 1.32522105e+05,
       1.34198899e+05, 1.35847571e+05, 1.37468576e+05, 1.39062363e+05,
       1.40629372e+05, 1.42170040e+05, 1.43684796e+05, 1.45174062e+05,
       1.46638256e+05, 1.48077787e+05, 1.49493060e+05, 1.50884473e+05,
       1.52252417e+05, 1.53597278e+05, 1.54919437e+05, 1.56219266e+05,
       1.57497135e+05, 1.58753406e+05, 1.59988436e+05, 1.61202574e+05,
       1.62396168e+05, 1.63569558e+05, 1.64723078e+05, 1.65857057e+05,
       1.66971820e+05, 1.68067686e+05, 1.69144970e+05, 1.70203980e+05,
       1.71245019e+05, 1.72268389e+05, 1.73274382e+05, 1.74263289e+05,
       1.75235395e+05, 1.76190981e+05, 1.77130321e+05, 1.78053689e+05,
       1.78961350e+05, 1.79853569e+05, 1.80730603e+05, 1.81592706e+05,
       1.82440130e+05, 1.83273121e+05, 1.84091920e+05, 1.84896765e+05,
       1.85687892e+05, 1.86465531e+05, 1.87229909e+05, 1.87981248e+05,
       1.88719768e+05, 1.89445686e+05, 1.90159213e+05, 1.90860558e+05,
       1.91549926e+05, 1.92227520e+05, 1.92893539e+05, 1.93548177e+05,
       1.94191627e+05, 1.94824078e+05, 1.95445717e+05, 1.96056725e+05,
       1.96657283e+05, 1.97247567e+05, 1.97827752e+05, 1.98398008e+05,
       1.98958504e+05, 1.99509405e+05, 2.00050874e+05, 2.00583070e+05,
       2.01106152e+05, 2.01620273e+05, 2.02125586e+05]), array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
       0.00000000e+00, 0.00000000e+00, 5.84984254e-03, 1.63597843e-02,
       3.09150441e-02, 4.92911416e-02, 7.15395232e-02, 9.79186654e-02,
       1.28854898e-01, 1.64922977e-01, 2.06840170e-01, 2.55469984e-01,
       3.11833253e-01, 3.77125295e-01, 4.52738532e-01, 5.40290444e-01,
       6.41657053e-01, 7.59012411e-01, 8.94874773e-01, 1.05216034e+00,
       1.23424565e+00, 1.44503997e+00, 1.68906910e+00, 1.97157252e+00,
       2.29861577e+00, 2.67722072e+00, 3.11551618e+00, 3.62291242e+00,
       4.21030307e+00, 4.89029888e+00, 5.67749825e+00, 6.58880035e+00,
       7.64376745e+00, 8.86504426e+00, 1.02788431e+01, 1.19155054e+01,
       1.38101505e+01, 1.60034274e+01, 1.85423823e+01, 2.14814626e+01,
       2.48836767e+01, 2.88219326e+01, 3.33805846e+01, 3.86572151e+01,
       4.47646893e+01, 5.18335191e+01, 6.00145790e+01, 6.94822222e+01,
       8.04378445e+01, 9.31139506e+01, 1.07778773e+02, 1.24741494e+02,
       1.44358109e+02, 1.67037960e+02, 1.93250920e+02, 2.23535189e+02,
       2.58505570e+02, 2.98861981e+02, 3.45397827e+02, 3.99007610e+02,
       4.60692867e+02, 5.31565138e+02, 6.12844147e+02, 7.05848810e+02,
       8.11978023e+02, 9.32677627e+02, 1.06938961e+03, 1.22347988e+03,
       1.39614230e+03, 1.58827950e+03, 1.80036590e+03, 2.03230512e+03,
       2.28330196e+03, 2.55177540e+03, 2.83534169e+03, 3.13089014e+03,
       3.43475925e+03, 3.74299821e+03, 4.05167564e+03, 4.35718369e+03,
       4.65648543e+03, 4.94726938e+03, 5.22799876e+03, 5.49786698e+03,
       5.75668635e+03, 6.00474266e+03, 6.24264454e+03, 6.47118800e+03,
       6.69124743e+03, 6.90369607e+03, 7.10935391e+03, 7.30895825e+03,
       7.50315104e+03, 7.69247789e+03, 7.87739409e+03, 8.05827457e+03,
       8.23542524e+03, 8.40909445e+03, 8.57948351e+03, 8.74675602e+03,
       8.91104575e+03, 9.07246316e+03, 9.23110065e+03, 9.38703677e+03,
       9.54033949e+03, 9.69106874e+03, 9.83927832e+03, 9.98501743e+03,
       1.01283317e+04, 1.02692642e+04, 1.04078557e+04, 1.05441455e+04,
       1.06781715e+04, 1.08099707e+04, 1.09395791e+04, 1.10670318e+04,
       1.11923636e+04, 1.13156083e+04, 1.14367995e+04, 1.15559699e+04,
       1.16731521e+04, 1.17883779e+04, 1.19016787e+04, 1.20130855e+04,
       1.21226289e+04, 1.22303389e+04, 1.23362452e+04, 1.24403769e+04,
       1.25427628e+04, 1.26434313e+04, 1.27424102e+04, 1.28397270e+04,
       1.29354089e+04, 1.30294824e+04, 1.31219738e+04, 1.32129091e+04,
       1.33023135e+04, 1.33902123e+04, 1.34766302e+04, 1.35615913e+04,
       1.36451196e+04, 1.37272388e+04, 1.38079719e+04, 1.38873418e+04,
       1.39653710e+04, 1.40420817e+04, 1.41174955e+04, 1.41916339e+04,
       1.42645180e+04, 1.43361686e+04, 1.44066061e+04, 1.44758506e+04,
       1.45439219e+04, 1.46108395e+04, 1.46766226e+04, 1.47412899e+04,
       1.48048601e+04, 1.48673515e+04, 1.49287819e+04, 1.49891692e+04,
       1.50485306e+04, 1.51068834e+04, 1.51642443e+04, 1.52206300e+04,
       1.52760567e+04, 1.53305405e+04, 1.53840972e+04, 1.54367422e+04,
       1.54884910e+04, 1.55393584e+04, 1.55893594e+04, 1.56385084e+04,
       1.56868197e+04, 1.57343075e+04, 1.57809855e+04, 1.58268674e+04,
       1.58719666e+04, 1.59162963e+04, 1.59598694e+04, 1.60026986e+04,
       1.60447966e+04, 1.60861756e+04, 1.61268478e+04]), [4.245962200713755, 4.245962160017396, 4.245962109123922, 4.245962045478286, 4.245961965885232, 4.245961866348886, 4.245961741872144, 4.245961586205799, 4.24596139153481, 4.245961148085959, 4.2459608436371985, 4.245960462904063, 4.24595998677234, 4.245959391338473, 4.245958646709526, 4.245957715502477, 4.245956550967485, 4.245955094640944, 4.245953273410489, 4.245950995844646, 4.245948147602889, 4.245944585695717, 4.24594013130669, 4.245934560816175, 4.245927594576373, 4.245918882874428, 4.2459079883794, 4.245894364192681, 4.245877326401141, 4.245856019757004, 4.245829374764503, 4.245796054023641, 4.245754385144747, 4.245702276877505, 4.245637114261983, 4.245555627566259, 4.245453728475239, 4.245326305376175, 4.245166967572017, 4.24496772575082, 4.2447185929348015, 4.244407086289551, 4.24401760542973, 4.243530657020865, 4.242921888327734, 4.242160883652931, 4.241209667083861, 4.240020842367734, 4.2385352858529135, 4.236679291176792, 4.234361044882543, 4.231466290966457, 4.2278530207676095, 4.223345005057891, 4.217723971971797, 4.210720234670256, 4.202001597714059, 4.191160438408314, 4.177698994462257, 4.161013128242151, 4.140375228646269, 4.114917512918945, 4.08361786484146, 4.0452915397881, 3.998593574782531, 3.9420384371290624, 3.8740449864718203, 3.7930155428348478, 3.697456681019888, 3.586144937806736, 3.4583316711583643, 3.3139676175763055, 3.1539112946651713, 2.980071552594989, 2.7954311932257343, 2.6039129937250096, 2.4100832029986106, 2.2187321594958145, 2.034410060208259, 1.8610107512723686, 1.701480536004345, 1.557690072025805, 1.4304629745914403, 1.319721610653998, 1.2246968522405897, 1.144152452464729, 1.076588765286115, 1.0204069035044736, 0.9740279731771164, 0.9359707977762501, 0.9048958406249625, 0.8796241176131915, 0.8591391297612194, 0.8425782893515085, 0.8292186203019691, 0.8184600156495343, 0.8098081525774443, 0.8028583018687674, 0.7972806758610071, 0.7928075745116508, 0.7892223546481748, 0.7863501153233036, 0.7840499267749701, 0.782208406536368, 0.7807344466239426, 0.7795549092738151, 0.7786111283821422, 0.7778560754134768, 0.7772520696789484, 0.7767689323114239, 0.7763825004398434, 0.7760734328633441, 0.7758262510475058, 0.7756285697219767, 0.7754704800064447, 0.7753440550908473, 0.7752429542903878, 0.7751621060053706, 0.7750974539303144, 0.7750457539381349, 0.7750044115490878, 0.7749713518931671, 0.7749449156813047, 0.7749237759907047, 0.7749068717045026, 0.7748933542756107, 0.7748825451494044, 0.7748739017123857, 0.7748669900603073, 0.7748614632205264, 0.7748570437364888, 0.7748535097408026, 0.7748506838182129, 0.7748484240996789, 0.7748466171406445, 0.774845172226096, 0.7748440168165813, 0.7748430929066191, 0.7748423541127065, 0.7748417633447582, 0.7748412909440845, 0.7748409131944394, 0.7748406111313915, 0.7748403695902476, 0.7748401764447347, 0.7748400219982182, 0.7748398984968975, 0.7748397997405361, 0.774839720771188, 0.7748396576242901, 0.7748396071296262, 0.7748395667521707, 0.7748395344648203, 0.7748395086466261, 0.7748394880014154, 0.7748394714927193, 0.7748394582917375, 0.7748394477357302, 0.7748394392947451, 0.7748394325450122, 0.774839427147669, 0.7748394228317479, 0.7748394193805732, 0.7748394166208826, 0.7748394144141291, 0.7748394126495249, 0.7748394112384803, 0.7748394101101553, 0.7748394092079037, 0.7748394084864291, 0.7748394079095104, 0.7748394074481844, 0.7748394070792906, 0.774839406784309, 0.7748394065484304, 0.774839406359813, 0.7748394062089874, 0.7748394060883814, 0.7748394059919403, 0.7748394059148224, 0.7748394058531559, 0.774839405803845, 0.7748394057644141, 0.7748394057328838, 0.7748394057076708, 0.7748394056875096, 0.774839405671388, 0.7748394056584965, 0.774839405648188, 0.7748394056399449, 0.7748394056333534, 0.7748394056280826, 0.7748394056238679, 0.7748394056204976, 0.7748394056178026, 0.7748394056156476, 0.7748394056139244, 0.7748394056125464, 0.7748394056114445], 8936570, [0.07853267263903559, 0.07853267263903559, 0.07853267263903559, 0.07853267263903559, 0.07853267263903559, 0.07853267263903559, 0.07853267263903559, 0.07853267263903559, 0.07853267264099871, 0.07853267264256257, 0.07853267264392011, 0.07853267264520233, 0.07853267264650181, 0.07853267264788803, 0.07853267264941732, 0.0785326726511395, 0.07853267265310238, 0.07853267265535503, 0.07853267265795026, 0.07853267266094663, 0.07853267266441027, 0.07853267266841672, 0.07853267267305274, 0.07853267267841835, 0.07853267268462905, 0.07853267269181838, 0.07853267270014086, 0.07853267270977525, 0.07853267272092847, 0.07853267273384001, 0.07853267274878714, 0.07853267276609079, 0.0785326727861225, 0.07853267280931236, 0.07853267283615827, 0.0785326728672366, 0.07853267290321456, 0.07853267294486453, 0.07853267299308066, 0.07853267304889791, 0.07853267311351443, 0.07853267318831705, 0.0785326732749111, 0.07853267337515472, 0.07853267349119858, 0.07853267362553185, 0.0785326737810353, 0.0785326739610427, 0.07853267416941165, 0.07853267441060537, 0.07853267468978718, 0.07853267501292914, 0.07853267538693728, 0.07853267581979552, 0.07853267632073065, 0.07853267690040137, 0.07853267757111394, 0.07853267834706731, 0.07853267924463062, 0.07853268028265506, 0.0785326814828219, 0.07853268287002622, 0.07853268447279435, 0.0785326863237285, 0.07853268845996733, 0.07853269092364236, 0.07853269376229886, 0.07853269702923546, 0.07853270078369337, 0.07853270509080057, 0.07853271002114494, 0.0785327156498093, 0.07853272205467035, 0.07853272931373116, 0.0785327375012585, 0.07853274668254163, 0.07853275690720483, 0.07853276820123083, 0.07853278055818345, 0.07853279393052981, 0.07853280822238422, 0.07853282328526695, 0.07853283891843563, 0.07853285487487201, 0.07853287087307591, 0.07853288661368492, 0.07853290179884345, 0.07853291615164275, 0.0785329294329639, 0.07853294145370432, 0.07853295208136706, 0.0785329612410469, 0.07853296891167819, 0.07853297511888732, 0.07853297992591139, 0.07853298342389514, 0.07853298572258544, 0.07853298694208492, 0.07853298720602651, 0.07853298663626979, 0.07853298534905186, 0.0785329834524203, 0.07853298104472665, 0.07853297821395643, 0.0785329750376724, 0.07853297158339398, 0.07853296790925916, 0.07853296406484814, 0.07853296009208179, 0.0785329560261296, 0.07853295189628832, 0.07853294772679836, 0.07853294353758901, 0.07853293934494171, 0.07853293516207363, 0.07853293099964295, 0.0785329268661827, 0.07853292276846989, 0.07853291871183643, 0.07853291470043011, 0.0785329107374321, 0.07853290682523656, 0.07853290296559995, 0.07853289915976323, 0.07853289540855185, 0.07853289171245748, 0.07853288807170487, 0.07853288448630578, 0.07853288095610268, 0.07853287748080429, 0.07853287406001418, 0.07853287069325371, 0.07853286737998054, 0.07853286411960345, 0.07853286091149424, 0.07853285775499748, 0.07853285464943739, 0.07853285159412464, 0.07853284858836103, 0.07853284563144317, 0.07853284272266563, 0.07853283986132276, 0.07853283704671174, 0.07853283427813328, 0.07853283155489287, 0.07853282887630164, 0.07853282624167741, 0.07853282365034495, 0.0785328211016364, 0.07853281859489171, 0.07853281612945882, 0.0785328137046938, 0.07853281131996093, 0.07853280897463284, 0.07853280666809052, 0.07853280439972332, 0.07853280216892895, 0.07853279997511345, 0.07853279781769115, 0.07853279569608462, 0.07853279360972461, 0.07853279155805, 0.07853278954050767, 0.07853278755655257, 0.07853278560564744, 0.07853278368726296, 0.07853278180087742, 0.07853277994597685, 0.0785327781220548, 0.07853277632861233, 0.07853277456515788, 0.07853277283120717, 0.0785327711262831, 0.07853276944991595, 0.078532767801643, 0.07853276618100816, 0.07853276458756266, 0.07853276302086432, 0.0785327614804775, 0.07853275996597363, 0.07853275847693032, 0.0785327570129316, 0.07853275557356833, 0.07853275415843693, 0.0785327527671406, 0.0785327513992887, 0.0785327500544963, 0.07853274873238451, 0.07853274743258051, 0.07853274615471718, 0.07853274489843322, 0.07853274366337279, 0.07853274244918548, 0.07853274125552658, 0.07853274008205693, 0.0785327389284426, 0.07853273779435481, 0.07853273667947011, 0.0785327355834701])
----


+*In[13]:*+
[source, ipython3]
----
# Goodnes of fit (R2)
y=y_data
yhat = result.best_fit
SS_Residual = sum((y-yhat)**2)       
SS_Total = sum((y-np.mean(y))**2)     
r_squared = 1 - (float(SS_Residual))/SS_Total
print (r_squared) 
----


+*Out[13]:*+
----
0.9976776933524192
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----
